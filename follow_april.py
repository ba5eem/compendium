import math
import threading
import olympe
from olympe.messages.ardrone3.Piloting import TakeOff, moveBy, Landing, moveTo, Circle, PCMD
from olympe.messages.ardrone3.PilotingState import moveToChanged, FlyingStateChanged, PositionChanged, AttitudeChanged
from olympe.messages.ardrone3.GPSSettingsState import GPSFixStateChanged
from olympe.messages.ardrone3.PilotingState import GpsLocationChanged
from olympe.enums.ardrone3.Piloting import MoveTo_Orientation_mode

route = [
  [ 21.368492831528414, -157.712818 ],
  [ 21.368582663056824, -157.712818 ],
  [ 21.368672494585237, -157.712818 ],
  [ 21.36876232611365, -157.712818 ],
  [ 21.36885215764206, -157.712818 ],
  [ 21.368941989170473, -157.712818 ],
  [ 21.369031820698883, -157.712818 ],
  [ 21.369121652227296, -157.712818 ],
  [ 21.36921148375571, -157.712818 ],
  [ 21.36930131528412, -157.712818 ],
  [ 21.369391146812532, -157.712818 ],
  [ 21.369480978340945, -157.712818 ],
  [ 21.369570809869355, -157.712818 ],
  [ 21.36966064139777, -157.712818 ],
  [ 21.36975047292618, -157.712818 ],
  [ 21.36984030445459, -157.712818 ],
  [ 21.369930135983005, -157.712818 ],
  [ 21.370019967511414, -157.712818 ],
  [ 21.370109799039827, -157.712818 ],
  [ 21.37019963056824, -157.712818 ],
  [ 21.37019963056824, -157.7127215361443 ],
  [ 21.37019963056824, -157.7126250722886 ],
  [ 21.37019963056824, -157.7125286084329 ],
  [ 21.37019963056824, -157.7124321445772 ],
  [ 21.37019963056824, -157.7123356807215 ],
  [ 21.37019963056824, -157.7122392168658 ],
  [ 21.37019963056824, -157.7121427530101 ],
  [ 21.37019963056824, -157.71204628915442 ],
  [ 21.37019963056824, -157.71194982529872 ],
  [ 21.37019963056824, -157.71185336144302 ],
  [ 21.37019963056824, -157.7117568975873 ],
  [ 21.37019963056824, -157.7116604337316 ],
  [ 21.37019963056824, -157.7115639698759 ],
  [ 21.37019963056824, -157.7114675060202 ],
  [ 21.37019963056824, -157.7113710421645 ],
  [ 21.37019963056824, -157.7112745783088 ],
  [ 21.37019963056824, -157.7111781144531 ],
  [ 21.37019963056824, -157.7110816505974 ],
  [ 21.37019963056824, -157.7109851867417 ],
  [ 21.37019963056824, -157.710888722886 ],
  [ 21.370109799039827, -157.7107922590303 ],
  [ 21.370019967511418, -157.71069579517462 ],
  [ 21.369930135983005, -157.71059933131892 ],
  [ 21.36984030445459, -157.71050286746322 ],
  [ 21.36975047292618, -157.71040640360752 ],
  [ 21.36966064139777, -157.71030993975182 ],
  [ 21.36957080986936, -157.71021347589613 ],
  [ 21.369480978340945, -157.71011701204043 ],
  [ 21.369391146812532, -157.71002054818473 ],
  [ 21.369301315284122, -157.70992408432903 ],
  [ 21.36921148375571, -157.7098276204733 ],
  [ 21.369121652227296, -157.7097311566176 ],
  [ 21.369031820698886, -157.7096346927619 ],
  [ 21.368941989170473, -157.7095382289062 ],
  [ 21.36885215764206, -157.7094417650505 ],
  [ 21.36876232611365, -157.70934530119482 ],
  [ 21.368672494585237, -157.70924883733912 ],
  [ 21.368582663056827, -157.70915237348342 ],
  [ 21.368492831528414, -157.70905590962772 ],
  [ 21.368403, -157.70895944577202 ], # heads southwest after this - possible to split the pack
  [ 21.368313168471587, -157.70905590844418 ],
  [ 21.368223336943178, -157.70915237111635 ],
  [ 21.368133505414765, -157.7092488337885 ],
  [ 21.36804367388635, -157.70934529646067 ],
  [ 21.36795384235794, -157.70944175913283 ],
  [ 21.36786401082953, -157.70953822180496 ],
  [ 21.36777417930112, -157.70963468447712 ],
  [ 21.367684347772705, -157.70973114714928 ],
  [ 21.367594516244292, -157.70982760982145 ],
  [ 21.367504684715882, -157.7099240724936 ],
  [ 21.36741485318747, -157.71002053516577 ],
  [ 21.367325021659056, -157.71011699783793 ],
  [ 21.367235190130646, -157.7102134605101 ],
  [ 21.367145358602233, -157.71030992318225 ],
  [ 21.36705552707382, -157.7104063858544 ],
  [ 21.36696569554541, -157.71050284852654 ],
  [ 21.366875864016997, -157.7105993111987 ],
  [ 21.366786032488587, -157.71069577387087 ],
  [ 21.366696200960174, -157.71079223654303 ],
  [ 21.36660636943176, -157.7108886992152 ]
]

casey = [[ 21.368447915764207, -157.71276976863433 ] ,
[ 21.368537747292617, -157.71276976860474 ] ,
[ 21.36862757882103, -157.71276976857516 ] ,
[ 21.368717410349443, -157.71276976854557 ] ,
[ 21.368807241877853, -157.71276976851598 ] ,
[ 21.368897073406266, -157.7127697684864 ] ,
[ 21.368986904934676, -157.7127697684568 ] ,
[ 21.36907673646309, -157.71276976842722 ] ,
[ 21.369166567991503, -157.71276976839764 ] ,
[ 21.369256399519912, -157.71276976836805 ] ,
[ 21.369346231048326, -157.71276976833846 ] ,
[ 21.36943606257674, -157.71276976830887 ] ,
[ 21.36952589410515, -157.7127697682793 ] ,
[ 21.36961572563356, -157.7127697682497 ] ,
[ 21.369705557161975, -157.71276976822008 ] ,
[ 21.369795388690385, -157.7127697681905 ] ,
[ 21.369885220218798, -157.7127697681609 ] ,
[ 21.369975051747208, -157.71276976813132 ] ,
[ 21.37006488327562, -157.71276976810174 ] ,
[ 21.370154714804034, -157.71276976807215 ] ,
[ 21.370154714804034, -157.71267330421645 ] ,
[ 21.370154714804034, -157.71257684036075 ] ,
[ 21.370154714804034, -157.71248037650506 ] ,
[ 21.370154714804034, -157.71238391264936 ] ,
[ 21.370154714804034, -157.71228744879366 ] ,
[ 21.370154714804034, -157.71219098493796 ] ,
[ 21.370154714804034, -157.71209452108226 ] ,
[ 21.370154714804034, -157.71199805722657 ] ,
[ 21.370154714804034, -157.71190159337087 ] ,
[ 21.370154714804034, -157.71180512951517 ] ,
[ 21.370154714804034, -157.71170866565944 ] ,
[ 21.370154714804034, -157.71161220180375 ] ,
[ 21.370154714804034, -157.71151573794805 ] ,
[ 21.370154714804034, -157.71141927409235 ] ,
[ 21.370154714804034, -157.71132281023665 ] ,
[ 21.370154714804034, -157.71122634638095 ] ,
[ 21.370154714804034, -157.71112988252526 ] ,
[ 21.370154714804034, -157.71103341866956 ] ,
[ 21.370154714804034, -157.71093695481386 ] ,
[ 21.370154714804034, -157.71084049095816 ] ,
[ 21.37006488327562, -157.71074402713205 ] ,
[ 21.36997505174721, -157.71064756330594 ] ,
[ 21.369885220218798, -157.71055109947983 ] ,
[ 21.369795388690385, -157.71045463565372 ] ,
[ 21.369705557161975, -157.7103581718276 ] ,
[ 21.36961572563356, -157.71026170800152 ] ,
[ 21.369525894105152, -157.7101652441754 ] ,
[ 21.36943606257674, -157.7100687803493 ] ,
[ 21.369346231048326, -157.7099723165232 ] ,
[ 21.369256399519916, -157.70987585269708 ] ,
[ 21.369166567991503, -157.70977938887094 ] ,
[ 21.36907673646309, -157.70968292504483 ] ,
[ 21.36898690493468, -157.70958646121872 ] ,
[ 21.368897073406266, -157.7094899973926 ] ,
[ 21.368807241877853, -157.7093935335665 ] ,
[ 21.368717410349443, -157.7092970697404 ] ,
[ 21.36862757882103, -157.70920060591428 ] ,
[ 21.36853774729262, -157.70910414208817 ] ,
[ 21.368447915764207, -157.70900767826205 ] ,
[ 21.368358084235794, -157.70891121443594 ] ,
[ 21.36826825270738, -157.7090076771377 ] ,
[ 21.36817842117897, -157.70910413983944 ] ,
[ 21.368088589650558, -157.7092006025412 ] ,
[ 21.367998758122145, -157.70929706524294 ] ,
[ 21.367908926593735, -157.70939352794468 ] ,
[ 21.36781909506532, -157.7094899906464 ] ,
[ 21.367729263536912, -157.70958645334815 ] ,
[ 21.3676394320085, -157.7096829160499 ] ,
[ 21.367549600480086, -157.70977937875165 ] ,
[ 21.367459768951676, -157.7098758414534 ] ,
[ 21.367369937423263, -157.70997230415514 ] ,
[ 21.36728010589485, -157.7100687668569 ] ,
[ 21.36719027436644, -157.71016522955864 ] ,
[ 21.367100442838026, -157.7102616922604 ] ,
[ 21.367010611309613, -157.7103581549621 ] ,
[ 21.366920779781204, -157.71045461766383 ] ,
[ 21.36683094825279, -157.71055108036558 ] ,
[ 21.36674111672438, -157.71064754306732 ] ,
[ 21.366651285195967, -157.71074400576907 ] ,
[ 21.366561453667554, -157.71084046847082 ] ,
]



april_ip = "10.202.0.1" 
casey_ip = "10.202.1.1"
donatello_ip = "10.202.2.1"
leonardo_ip = "10.202.3.1"
michelangelo_ip = "10.202.4.1"
raphael_ip = "10.202.5.1"
splinter_ip = "10.202.6.1"

april = olympe.Drone(april_ip)
casey = olympe.Drone(casey_ip)
donatello = olympe.Drone(donatello_ip)
leonardo = olympe.Drone(leonardo_ip)
michelangelo = olympe.Drone(michelangelo_ip)
raphael = olympe.Drone(raphael_ip)
splinter = olympe.Drone(splinter_ip)

# april.connection()
# casey.connection()

swarm = [casey, donatello, leonardo, michelangelo, raphael, splinter]
april.connection()

for drone in swarm:
    drone.connection()

# Take-off
def takeOff(drone):
    drone(
        FlyingStateChanged(state="hovering", _policy="check")
        | FlyingStateChanged(state="flying", _policy="check")
        | (
            GPSFixStateChanged(fixed=1, _timeout=10, _policy="check_wait")
            >> (
                TakeOff(_no_expect=True)
                & FlyingStateChanged(
                    state="hovering", _timeout=10, _policy="check_wait")
            )
        )
    ).wait()

takeOff(april)

for drone in swarm:
    takeOff(drone)









def move(index,coords):

    april(
        moveTo(route[index+4][0], route[index+4][1], 1, MoveTo_Orientation_mode.TO_TARGET, 0.0)
        >> PCMD(1, 0, 0, 0, 0, 0)
        >> FlyingStateChanged(state="hovering", _timeout=5)
    ).wait().success()
    casey(
        moveTo(route[index+3][0], route[index+3][1], 1, MoveTo_Orientation_mode.TO_TARGET, 0.0)
        >> PCMD(1, 0, 0, 0, 0, 0)
        >> FlyingStateChanged(state="hovering", _timeout=5)
    ).wait().success()
    donatello(
        moveTo(route[index+2][0], route[index+2][1], 1, MoveTo_Orientation_mode.TO_TARGET, 0.0)
        >> PCMD(1, 0, 0, 0, 0, 0)
        >> FlyingStateChanged(state="hovering", _timeout=5)
    ).wait().success()
    leonardo(
        moveTo(route[index][0], route[index][1], 1, MoveTo_Orientation_mode.TO_TARGET, 0.0)
        >> PCMD(1, 0, 0, 0, 0, 0)
        >> FlyingStateChanged(state="hovering", _timeout=5)
    ).wait().success()
    







for index, coords in enumerate(route):
    move(index,coords)




# using

# def moveDonatello():
#     poi = april.get_state(GpsLocationChanged)
#     donatello(
#         moveTo(poi["latitude"],  poi["longitude"], 0.9, MoveTo_Orientation_mode.TO_TARGET, 0.0)
#         >> PCMD(1, 0, 0, 0, 0, 0)
#         >> FlyingStateChanged(state="hovering", _timeout=5)
#     ).wait().success()

# # using
# setInterval(moveDonatello,3)
    


# def moveLeonardo():
#     poi = april.get_state(GpsLocationChanged)
#     leonardo(
#         moveTo(poi["latitude"],  poi["longitude"], 0.9, MoveTo_Orientation_mode.TO_TARGET, 0.0)
#         >> PCMD(1, 0, 0, 0, 0, 0)
#         >> FlyingStateChanged(state="hovering", _timeout=5)
#     ).wait().success()

# # using
# setInterval(moveLeonardo,4)

# def moveMichelangelo():
#     poi = april.get_state(GpsLocationChanged)
#     michelangelo(
#         moveTo(poi["latitude"],  poi["longitude"], 0.9, MoveTo_Orientation_mode.TO_TARGET, 0.0)
#         >> PCMD(1, 0, 0, 0, 0, 0)
#         >> FlyingStateChanged(state="hovering", _timeout=5)
#     ).wait().success()

# # using
# setInterval(moveMichelangelo,4)


